# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions
# More info on Python, GitHub Actions, and Azure App Service: https://aka.ms/python-webapps-actions

name: Build and deploy Python app to Azure Web App - bot-notificacoes-telegram

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read #This is required for actions/checkout

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Create and start virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate
      
      - name: Install dependencies
        run: pip install -r requirements.txt
        
      # Optional: Add step to run tests here (PyTest, Django test suites, etc.)
      - name: Run tests
        run: |
          source venv/bin/activate
          pytest tests/
          # or any other test command you use
      # Optional: Add step to run linting here (Flake8, Pylint, etc.)

      - name: Run linting
        run: |
          source venv/bin/activate
          flake8 . # or any other linting command you use
      # Optional: Add step to run security checks here (Bandit, Safety, etc.)
      - name: Run security checks
        run: |
          source venv/bin/activate
          bandit -r . # or any other security check command you use
      # Optional: Add step to run formatting checks here (Black, isort, etc.)
      - name: Run formatting checks
        run: |
          source venv/bin/activate
          black --check . # or any other formatting check command you use
      # Optional: Add step to run type checks here (mypy, pyright, etc.)
      - name: Run type checks
        run: |
          source venv/bin/activate
          mypy . # or any other type check command you use
      # Optional: Add step to run documentation generation here (Sphinx, MkDocs, etc.)
      - name: Generate documentation
        run: |
          source venv/bin/activate
          sphinx-build -b html docs/source docs/build/html # or any other documentation generation command you use
      # Optional: Add step to run code coverage here (coverage.py, pytest-cov, etc.)
      - name: Run code coverage
        run: |
          source venv/bin/activate
          coverage run -m pytest tests/
          coverage report -m # or any other code coverage command you use
      # Optional: Add step to run performance tests here (Locust, JMeter, etc.)
      - name: Run performance tests
        run: |
          source venv/bin/activate
          locust -f locustfile.py # or any other performance test command you use
      # Optional: Add step to run end-to-end tests here (Selenium, Cypress, etc.)
      - name: Run end-to-end tests
        run: |
          source venv/bin/activate
          pytest tests/e2e/ # or any other end-to-end test command you use
      # Optional: Add step to run integration tests here (pytest, unittest, etc.)
      - name: Run integration tests
        run: |
          source venv/bin/activate
          pytest tests/integration/ # or any other integration test command you use
      # Optional: Add step to run unit tests here (pytest, unittest, etc.)
      - name: Run unit tests
        run: |
          source venv/bin/activate
          pytest tests/unit/ # or any other unit test command you use
      # Optional: Add step to run static analysis here (Pylint, Bandit, etc.)
      - name: Run static analysis
        run: |
          source venv/bin/activate
          pylint . # or any other static analysis command you use
      # Optional: Add step to run dynamic analysis here (Bandit, Safety, etc.)
      - name: Run dynamic analysis
        run: |
          source venv/bin/activate
          bandit -r . # or any other dynamic analysis command you use
      # Optional: Add step to run dependency checks here (Safety, pip-audit, etc.)
      - name: Run dependency checks
        run: |
          source venv/bin/activate
          safety check # or any other dependency check command you use
      # Optional: Add step to run security scans here (Bandit, Snyk, etc.)
      - name: Run security scans
        run: |
          source venv/bin/activate
          bandit -r . # or any other security scan command you use
      # Optional: Add step to run performance benchmarks here (Locust, JMeter, etc.)
      - name: Run performance benchmarks
        run: |
          source venv/bin/activate
          locust -f locustfile.py # or any other performance benchmark command you use
      # Optional: Add step to run load tests here (Locust, JMeter, etc.)
      - name: Run load tests
        run: |
          source venv/bin/activate
          locust -f locustfile.py # or any other load test command you use
      # Optional: Add step to run stress tests here (Locust, JMeter, etc.)
      - name: Run stress tests
        run: |
          source venv/bin/activate
          locust -f locustfile.py # or any other stress test command you use
      # Optional: Add step to run smoke tests here (pytest, unittest, etc.)
      - name: Run smoke tests
        run: |
          source venv/bin/activate
          pytest tests/smoke/ # or any other smoke test command you use
      # Optional: Add step to run regression tests here (pytest, unittest, etc.)
      - name: Run regression tests
        run: |
          source venv/bin/activate
          pytest tests/regression/ # or any other regression test command you use
      # Optional: Add step to run acceptance tests here (pytest, unittest, etc.)
      - name: Run acceptance tests
        run: |
          source venv/bin/activate
          pytest tests/acceptance/ # or any other acceptance test command you use
      # Optional: Add step to run exploratory tests here (pytest, unittest, etc.)
      - name: Zip artifact for deployment
        run: zip -r release.zip . -x "venv/*" "*.git/*" ".github/*" "tests/*"

      - name: List ZIP contents
        run: unzip -l release.zip/


      - name: Upload artifact for deployment jobs
        uses: actions/upload-artifact@v4
        with:
         name: python-app
         path: |
          release.zip
          !venv/

      #- name: Upload artifact for deployment
      #  uses: actions/upload-artifact@v4

  # Deploy job
  # This job will be triggered after the build job is successful
  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read #This is required for actions/checkout

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: python-app

      - name: Unzip artifact for deployment
        run: unzip release.zip

      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_7D1B5565DCDB4CFDB000F1CCE2FD2ED3 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_91CECDE1D1C24428A7BD3773A79DC93B }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_7D3A5C46767043099576C14ECB06651F }}

      - name: Deploy para Azure Web App
        uses: azure/webapps-deploy@v3
        id: deploy-to-webapp
        with:
          app-name: 'bot-notificacoes-telegram'
          slot-name: 'Production'
          package: release.zip    